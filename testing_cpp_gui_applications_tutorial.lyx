#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage[hidelinks,
  bookmarksnumbered=true,
  unicode=true,
  pdftitle={Testing C++ GUI applications},
  pdfauthor={Richèl Bilderbeek}
  ]{hyperref}
\usepackage{tikz}
\usepackage{tkz-graph}
\usepackage{pgf}
\usetikzlibrary{arrows,automata}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Testing C++ Qt GUI applications
\end_layout

\begin_layout Author
Richèl Bilderbeek
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is `Testing C++ Qt GUI applications', version 0.1, a tutorial about
 testing C++ GUI applications written with Qt.
\end_layout

\begin_layout Standard
For now, I only consider Qt applications under GNU/Linux, as I use 'xdotool'
 to manipulate windows.
\end_layout

\begin_layout Standard
Goal is to reliably test Qt GUI applications.
\end_layout

\begin_layout Subsection
Qt
\end_layout

\begin_layout Standard
Qt is a cross-platform C++ library to create GUIs.
\end_layout

\begin_layout Subsection
xdotool
\end_layout

\begin_layout Standard
xdotool is a GNU/Linux command-line tool.
\end_layout

\begin_layout Subsection
Travis CI
\end_layout

\begin_layout Standard
Travis CI is a continuous integration (hence the 'CI') tool.
\end_layout

\begin_layout Section
Setting up a minimal project
\end_layout

\begin_layout Standard
Setting up a minimal project consists out of these steps:
\end_layout

\begin_layout Itemize
Creating a minimal Qt application
\end_layout

\begin_layout Itemize
Testing the minimal Qt application
\end_layout

\begin_layout Subsection
Creating a minimal Qt application
\begin_inset CommandInset label
LatexCommand label
name "sub:Creating-a-minimal-qt-application"

\end_inset


\end_layout

\begin_layout Standard
Create a new Qt Creator project, by clicking from the Qt Creator menu 'File
 | New File or Project'.
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_1.png
	lyxscale 25
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Create a new project
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the 'New' dialog, select 'Qt Widgets Application' and click 'Choose'.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_2.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Create a new Qt Widgets application
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the 'Qt Widgets Application' dialog, pick a suitable location to put
 the files of your project.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_3.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Give your new application a suitable location
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the next 'Qt Widgets Application' dialog, just use the default kits by
 clicking 'Next'.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_4.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use the default kits
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the next 'Qt Widgets Application' dialog, use 'QDialog' as the base class.
 Use all default names by clicking 'Next'.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_5.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set the base class of your application's main window to QDialog
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the next 'Qt Widgets Application' dialog, skip this way of using git
 to do version control by clicking 'Finish'.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_6.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Skip using git via Qt Creator
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now, your minimal project is created.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_7.png
	lyxscale 25
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Part of the code of your first minimal project
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now run the application, by either pressing CTRL+R, selecting 'Build | Run'
 from the Qt Creator menu, or click the green arrow on the left.
 
\end_layout

\begin_layout Standard
The minimal application is an empty dialog.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_8.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The minimal application
\begin_inset CommandInset label
LatexCommand label
name "fig:minimal-application"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Testing this minimal Qt application
\end_layout

\begin_layout Standard
Instead of using the low-level xdotool commands as described in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:xdotool-tutorial"

\end_inset

, the minimal Qt application bash testing script is tested with higher-level
 functions:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "minimal_project/minimal_project.sh"
lstparams "breaklines=true,fontadjust=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
minimal_project.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It opens the application, closes it by using ALT-F4, re-starts the application,
 then closes it by using the mouse.
\end_layout

\begin_layout Standard
Note that this scripts is stripped down to fit on one page.
 
\end_layout

\begin_layout Section
Enter secret code
\end_layout

\begin_layout Standard
In this project, we create an application in which a secret code must be
 entered
\end_layout

\begin_layout Itemize
Creating the application
\end_layout

\begin_layout Itemize
Testing the application application
\end_layout

\begin_layout Subsection
Creating the application
\end_layout

\begin_layout Standard
Here it is:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/enter_secret_code_1.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The application
\begin_inset CommandInset label
LatexCommand label
name "fig:enter_secret_code"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Testing the application
\end_layout

\begin_layout Standard
Here code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "enter_secret_code/enter_secret_code.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
enter_secret_code.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Again this is a stripped-down version
\end_layout

\begin_layout Section
\start_of_appendix
xdotool minimal tutorial
\begin_inset CommandInset label
LatexCommand label
name "sub:xdotool-tutorial"

\end_inset


\end_layout

\begin_layout Standard
This is a step-by-step minimal xdotool tutorial.
\end_layout

\begin_layout Paragraph
Starting the minimal Qt application
\end_layout

\begin_layout Standard
Start the minimal Qt application in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Creating-a-minimal-qt-application"

\end_inset

.
 The minimal application will start (as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:minimal-application"

\end_inset

) with window name 'Dialog'.
 To start this application from the command line:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./minimal_example &
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the ampersand ('&') after the execution call of 'minimal_example'.
 It will launch the example on a new thread.
\end_layout

\begin_layout Paragraph
xdotool cannot detect a Qt application window from its title
\end_layout

\begin_layout Standard
'xdotool' can theoretically be used to detect that window with 'Dialog'
 as its title with the following command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

xdotool search --name "Dialog"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Too bad, this does not return any hit.
 We will need a detour to be able to find our window.
 
\end_layout

\begin_layout Paragraph
wmctrl can find all window title
\end_layout

\begin_layout Standard
The program 'wmctrl' can give us all windows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

wmctrl -l
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here you can see that wmctrl can detect our window:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/minimal_project_9.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
wmctrl finds a window with Dialog as its title
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
xdotool can work from a window ID, which is the first number wmctrl shows
 (in this case the number is '0x09c00006' ('0x' denotes the number is hexadecima
l)).
 Next step is to extract the window ID from this output.
\end_layout

\begin_layout Paragraph
Extract the window ID from wmctrl its output
\end_layout

\begin_layout Standard
To extract the window ID from wmctrl its output, we will select the line
 from wmctrl that contains the text 'Dialog' using egrep:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

wmctrl -l | egrep "Dialog"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the pipe ('|') symbol, which is a UNIX symbol to use the first command
 its output as imput for the second.
 In this case, this will return:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

0x09c00006  3              N/A Dialog
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can select the first field using the 'cut' command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

wmctrl -l | egrep "Dialog" | cut -f 1 -d ' '
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here the single line is cut into fields by using spaces as a delimiter,
 where we select the first field.
 This results in the hexadecimal value of the window ID:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

0x09c00006
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Use the extracted window ID to activate a window with xdotool
\end_layout

\begin_layout Standard
Because xdotool can handle hexadecimal, we can activate our dialog with
 this command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

xdotool windowactivate $(wmctrl -l | egrep "Dialog" | cut -f 1 -d ' ')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From this, we can do all kinds of tests.
 
\end_layout

\begin_layout Paragraph
xdotool: close a window by using ALT+F4
\end_layout

\begin_layout Standard
xdotools chains command, so now you can add the more useful commands at
 the end of the line.
\end_layout

\begin_layout Standard
For example, we can close the minimal dialog like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

xdotool windowactivate $(wmctrl -l | egrep "Dialog" | cut -f 1 -d ' ') sleep
 0.1 key alt+F4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that I added a call to 'sleep', to give the window some time to be
 actviated.
 
\end_layout

\begin_layout Paragraph
xdotool: get a window its geometry
\end_layout

\begin_layout Standard
Or get the window its geometry:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

xdotool getwindowgeometry $(wmctrl -l | egrep "Dialog" | cut -f 1 -d ' ')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This results (on my computer) in:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Window 48234502
\end_layout

\begin_layout Plain Layout

  Position: 441,386 (screen: 0)
\end_layout

\begin_layout Plain Layout

  Geometry: 400x300
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
xdotool: move the mouse cursor to the window close glyph
\end_layout

\begin_layout Standard
From that I can conclude where I have to put my mouse cursor to hover above
 the closing cross of the dialog:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

xdotool windowactivate $(wmctrl -l | egrep "Dialog" | cut -f 1 -d ' ') sleep
 0.1 mousemove 826 353
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
xdotool: close a window by clicking on the window close glyph
\end_layout

\begin_layout Standard
Adding a click command after this, will cause the window to close:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

xdotool windowactivate $(wmctrl -l | egrep "Dialog" | cut -f 1 -d ' ') sleep
 0.1 mousemove 826 353 click 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With these snippets of knowledge, one can create a decent test script
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "testing_cpp_gui_applications_tutorial"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
